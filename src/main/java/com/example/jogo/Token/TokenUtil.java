package com.example.jogo.Token;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTCreator;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.example.jogo.Entity.Member;
import com.example.jogo.Entity.User;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bson.internal.Base64;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.Map;

@Component
public class TokenUtil {
    private static String SECRET_KEY = "FU438F3HF98WHDASDHEKF8934FH";
    private static int TTL = 1*60*60*1000; // millis
    private static String ISSUER = "ADMIN";
//    private static Logger logger = LogManager.getLogger(TokenUtil.class);

    @Resource
    private RedisTemplate<String ,Object> redisTemplate;

    /**
     *
     * @param member object which requires authentication
     * @return token
     * @throws UnsupportedEncodingException using wrong algorithm to encode
     */
    public String sign(Member member) throws UnsupportedEncodingException {
        Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);
        Date expireAt = new Date(System.currentTimeMillis()+TTL);
        String token;
        token = JWT.create()
                .withIssuer(ISSUER)
                .withClaim("username",member.getUsername())
                .withClaim("Serial",getRandomSerial(0,100))
                .withExpiresAt(expireAt)
                .sign(algorithm);
        return token;
    }

    /**
     *
     * @param member
     * @param data <key,value> will be added into payload
     * @return token
     * @throws UnsupportedEncodingException
     */
    public String sign(Member member, Map<String,String> data) throws UnsupportedEncodingException {
        Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);
        Date expireAt = new Date(System.currentTimeMillis()+TTL);
        JWTCreator.Builder builder = JWT.create().withIssuer(ISSUER).withClaim("username",member.getUsername())
                .withClaim("Serial",getRandomSerial(0,100))
                .withExpiresAt(expireAt);
        for(String key:data.keySet())
            builder.withClaim(key,data.get(key));
        return builder.sign(algorithm);
    }


    /**
     * check the format of token
     * @param token generated by sign(User user)
     * @return isValid
     */
    public boolean verify(String token) throws JWTVerificationException,UnsupportedEncodingException{
//        try{
            Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);
            DecodedJWT jwt = getVerifier().verify(token);
//        }catch (JWTVerificationException e){
//            logger.info("Token无效");
//            return false;
//        }catch (UnsupportedEncodingException e){
//            logger.info("加密算法不匹配");
//            return false;
//        }
        return true;
    }

    /**
     *
     * @param token token generated by call sign(Member member) or sign(Member member,Map<String,String> data)
     * @param key whose value your want
     * @return value of key
     */
    public Object getDataFromPayLoad(String token,String key) throws UnsupportedEncodingException,JWTVerificationException{
            JWTVerifier verifier = getVerifier();
            DecodedJWT jwt = verifier.verify(token);
            String payLoad = jwt.getPayload();
            payLoad = new String(Base64.decode(payLoad), StandardCharsets.UTF_8);
            JSONObject json = JSON.parseObject(payLoad);
            return json.get(key);
    }

//    public boolean storeOrReplaceInRedis(String username,String token,int expireTime){
//        if(redisTemplate.opsForHash().hasKey("Tokens",username)){
//            redisTemplate.opsForHash().delete("Tokens",username);
//        }
//        redisTemplate.opsForHash().put("Tokens",username,token);
//        return false;
//    }


    private JWTVerifier getVerifier() throws UnsupportedEncodingException {
        return JWT.require(Algorithm.HMAC256(SECRET_KEY)).withIssuer(ISSUER).build();
    }

    private int getRandomSerial(int min, int max){
        return (int)(Math.random()*(max-min)+min);
    }

    /**
     * @return TTL(time to live) expireTime of token
     */
    public static int getLiveTime(){
        return TTL;
    }
}
